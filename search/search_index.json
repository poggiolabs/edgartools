{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About edgartools edgartools is a Python library for navigating SEC filings and data. With edgartools you can Find and view any SEC filing since 1994 Locate any company and see its filings Automatically extract data from XBRL , HTML , SGML , and XML Get reference data like CUSIP , CIK , and Ticker for companies Install 1. Install using pip pip install edgartools 2. Import and set identity Use from edgar import * to import most of what you need. 3. Set your identity Before you can access the SEC Edgar API you need to set the identity that you will use to access Edgar. This is usually your name and email , but you can also just use an email. from edgar import * set_identity(\"mike.mccalum@indigo.com\") Usage Starting with a Company You can start by getting a company by CIK or Ticker with Company() . For example: c = Company(\"AAPL\") filings = c.get_filings() Starting with filings You can start by getting filings with get_filings . By default this will get all filings for the current year and quarter, but there are a lot of filtering options. filings = get_filings() The get_filings function takes the following parameters: year - A year or list of years to get filings for. Defaults to the current year. quarter - The quarter or list of quarters to get filings for. Defaults to the current quarter. form - The form to get filings for. Default to all forms. amendments - Whether to include amended filings e.g. include \"10-K/A\". Default is True. filing_date - The filing date to get filings for. index - Use index=\"xbrl\" to limit to only filings published using XBRL. Examples from edgar import get_filings # Get filings for 2021 filings_ = get_filings(2021) # Get filings for 2021 Q4 filings_ = get_filings(2021, 4) # Get filings for 2021 Q3 and Q4 filings_ = get_filings(2021, [3,4]) # Get filings for 2020 and 2021 filings_ = get_filings([2020, 2021]) # Get filings for Q4 of 2020 and 2021 filings_ = get_filings([2020, 2021], 4) # Get filings between 2010 and 2021 - does not include 2021 filings_ = get_filings(range(2010, 2021)) # Get filings for 2021 Q4 for form D filings_ = get_filings(2021, 4, form=\"D\") # Get filings for 2021 Q4 on \"2021-10-01\" filings_ = get_filings(2021, 4, filing_date=\"2021-10-01\") # Get filings for 2021 Q4 between \"2021-10-01\" and \"2021-10-10\" filings_ = get_filings(2021, 4, filing_date=\"2021-10-01:2021-10-10\") Viewing unpublished filings The SEC publishes the filing indexes week nights by 10:30 PM EST. To get the latest filings not yet in the index use the get_latest_filings function. For example: get_latest_filings()","title":"Overview"},{"location":"#about-edgartools","text":"edgartools is a Python library for navigating SEC filings and data. With edgartools you can Find and view any SEC filing since 1994 Locate any company and see its filings Automatically extract data from XBRL , HTML , SGML , and XML Get reference data like CUSIP , CIK , and Ticker for companies","title":"About edgartools"},{"location":"#install","text":"","title":"Install"},{"location":"#1-install-using-pip","text":"pip install edgartools","title":"1. Install using pip"},{"location":"#2-import-and-set-identity","text":"Use from edgar import * to import most of what you need.","title":"2. Import and set identity"},{"location":"#3-set-your-identity","text":"Before you can access the SEC Edgar API you need to set the identity that you will use to access Edgar. This is usually your name and email , but you can also just use an email. from edgar import * set_identity(\"mike.mccalum@indigo.com\")","title":"3. Set your identity"},{"location":"#usage","text":"","title":"Usage"},{"location":"#starting-with-a-company","text":"You can start by getting a company by CIK or Ticker with Company() . For example: c = Company(\"AAPL\") filings = c.get_filings()","title":"Starting with a Company"},{"location":"#starting-with-filings","text":"You can start by getting filings with get_filings . By default this will get all filings for the current year and quarter, but there are a lot of filtering options. filings = get_filings() The get_filings function takes the following parameters: year - A year or list of years to get filings for. Defaults to the current year. quarter - The quarter or list of quarters to get filings for. Defaults to the current quarter. form - The form to get filings for. Default to all forms. amendments - Whether to include amended filings e.g. include \"10-K/A\". Default is True. filing_date - The filing date to get filings for. index - Use index=\"xbrl\" to limit to only filings published using XBRL.","title":"Starting with filings"},{"location":"#examples","text":"from edgar import get_filings # Get filings for 2021 filings_ = get_filings(2021) # Get filings for 2021 Q4 filings_ = get_filings(2021, 4) # Get filings for 2021 Q3 and Q4 filings_ = get_filings(2021, [3,4]) # Get filings for 2020 and 2021 filings_ = get_filings([2020, 2021]) # Get filings for Q4 of 2020 and 2021 filings_ = get_filings([2020, 2021], 4) # Get filings between 2010 and 2021 - does not include 2021 filings_ = get_filings(range(2010, 2021)) # Get filings for 2021 Q4 for form D filings_ = get_filings(2021, 4, form=\"D\") # Get filings for 2021 Q4 on \"2021-10-01\" filings_ = get_filings(2021, 4, filing_date=\"2021-10-01\") # Get filings for 2021 Q4 between \"2021-10-01\" and \"2021-10-10\" filings_ = get_filings(2021, 4, filing_date=\"2021-10-01:2021-10-10\")","title":"Examples"},{"location":"#viewing-unpublished-filings","text":"The SEC publishes the filing indexes week nights by 10:30 PM EST. To get the latest filings not yet in the index use the get_latest_filings function. For example: get_latest_filings()","title":"Viewing unpublished filings"},{"location":"SEC-Forms/","text":"SEC Forms Financial Reports Domestic public companies file annual and quarterly reports, as well as current reports when certain events occur that require prompt disclosure. The annual and quarterly reports include financial statements for the relevant period. Form Description 10-K Annual report - provides audited annual financial statements, a discussion of material risk factors for the company and its business, and a management\u2019s discussion and analysis of the company\u2019s results of operations for the prior fiscal year. 10-Q Quarterly report \u2013 provides unaudited quarterly financial statements, updates regarding material risks that the company faces, and management\u2019s discussion and analysis of the company\u2019s results of operations for the prior fiscal quarter. 8-K Current report \u2013 discloses material events or information that the company chooses or is required to make public prior to its next scheduled quarterly or annual report. Shareholder Meetings Public companies, mutual funds, and ETFs that are subject to SEC proxy rules send proxy statements to their shareholders to solicit their votes at shareholder meetings. Proxy statements describe the matters to be voted on at the meeting and may include compensation and other information about the company\u2019s or fund\u2019s board and executive officers. The proxy statements of domestic public companies, mutual funds, and ETFs subject to SEC proxy rules can be found on EDGAR. Form Description PRE 14A Preliminary proxy statement \u2013 A preliminary proxy statement subject to review by the SEC staff. DEF 14A Definitive proxy statement \u2013 The final proxy statement sent to the company\u2019s shareholders in connection with the company\u2019s shareholder meeting. Executive Compensation Domestic public companies regularly disclose the compensation of their chief executive officer and other highly paid executives, and describe their executive and board compensation policies. Form Description DEF 14A Definitive proxy statement \u2013 Companies subject to the proxy rules will typically provide detailed compensation disclosure, including a compensation discussion and analysis section, in their annual proxy statement. 10-K Annual report \u2013 If the compensation disclosure isn\u2019t found in the proxy statement or the company has not filed a proxy statement, the annual report on Form 10-K should include the disclosure. 8-K Current report \u2013 Changes to compensation for certain executive officers requires disclosure under Item 5.02 of this report. EDGAR search results for reports on Form 8-K show the item numbers included in each report. Insider Transactions Corporate insiders\u2014officers, directors, and holders of more than 10 percent of a class of the company\u2019s registered equity securities\u2014must regularly disclose holdings and transactions in all equity securities of that company. Form Description 3 Initial statement of beneficial ownership \u2013 An initial statement of holdings in the company\u2019s equity securities 4 Disclosure of transactions in the company\u2019s equity securities within two business days of the transaction 5 Annual statement of beneficial ownership \u2013 Annual statement of holdings in the company\u2019s equity securities. Beneficial Ownership Interest Any person or group of persons that acquires beneficial ownership of more than five percent of a class of a public company\u2019s registered voting securities must disclose their holdings. In addition, companies regularly disclose who their significant shareholders are and institutional investment managers, such as managers of mutual funds, hedge funds, or pensions, regularly disclose their holdings. Form Description SC 13D Schedule 13D beneficial ownership report \u2013 Filed when a party acquires more than five percent of a class of a company\u2019s registered voting securities; also used to disclose any subsequent changes to their holdings. SC 13G Schedule 13G beneficial ownership report \u2013 Filed when a party acquires more than five percent of a class of a company\u2019s registered voting securities as a passive investment. DEF 14A Definitive proxy statement \u2013 Here, companies are required to disclose the amount of equity securities beneficially owned by their directors and officers, and any person or group that beneficially owns more than five percent of any class of the company\u2019s voting securities. 13F-HR Institutional investment manager report \u2013 Institutional investment managers disclose their holdings and any changes to them on a quarterly basis. Business Combination Depending on how a merger or acquisition is structured, different types of filings may be required by the companies involved in the transaction. Common form types filed in connection with a business combination include the following. Form Description PRE 14A Preliminary proxy statement relating to a merger or acquisition \u2013 A preliminary proxy statement, which remains subject to review by the SEC staff, filed in connection with a merger or acquisition. DEF 14A Definitive proxy statement \u2013 The final proxy statement sent to the company\u2019s shareholders in connection with the company\u2019s shareholder meeting. S-$ Registration statement \u2013 A registration statement is required when a company is making a merger or acquisition. 425 Prospectuses and communications \u2013 Written disclosures and communications in connection with a business combination where securities are part of the consideration. SC TO-T Tender offer statement by third party/issuer \u2013 A tender offer statement is filed by a party that is offering to buy outstanding shares of a public company from its shareholders. SC TO-I Tender offer solicitation/recommendation statements \u2013 A filing required to disclose the target company\u2019s recommendation on the tender offer. SC 14D9 Tender offer statement by third party/issuer \u2013 A tender offer statement is filed by a party that is offering to buy outstanding shares of a public company from its shareholders. 8-K Current report \u2013 Certain information about business combinations may be disclosed in a Form 8-K filing, such as the initial signing of a merger agreement or, if an acquisition doesn\u2019t require shareholder approval, information about the company being acquired. Public Offerings In order to register an offer and sale of securities to the public with the SEC, a company must file a registration statement. The first time a company publicly offers and sells its securities is known as its initial public offering. A prospectus, which often is a large part of the registration statement, is the document given to investors that discloses information about the company and the offering. Form Description S-1 Registration statement \u2013 Filed to register the offer and sale of securities to the public often in connection with an initial public offering. S-3 Short-form registration statement \u2013 An abbreviated registration statement available to certain already-reporting companies to register the offer and sale of securities to the public. 424B[#] Prospectus \u2013 A document disclosing information about the company and the offering that typically comprises a large part of the registration statement. UPLOAD Publicly released written correspondence from the SEC staff to the company during a review process, including a review of a company\u2019s registration statement for its initial public offering. CORRESP Publicly released correspondence from the company and its advisers to the SEC staff typically during a review process. Crowdfunding Crowdfunding is a way to raise money from small individual investments or contributions from a large number of people. Companies that offer and sell securities to the public in reliance on an exemption from registration for securities-based crowdfunding must make filings on EDGAR. Form Description C Offering statement \u2013 Disclosure by the company making a crowdfunding offering that contains information about itself and the offering. C-U Progress updates \u2013 Disclosure during the offering about the status of meeting the target offering amount (unless the intermediary provides updates on its online platform) and the final amount of securities sold. C-AR Annual report \u2013 An annual report by the company that includes financial statements. C-TR Termination of reporting \u2013 If eligible, a filing by the company terminating its obligation to file annual reports. Regulation A Offerings Regulation A allows eligible companies raising $50 million or less in a 12-month period to offer securities to the public with more limited disclosure than what is required in a registered securities offering. Companies conducting Regulation A offerings are subject to Tier 1 or Tier 2 requirements depending on how much capital they plan to raise in the offering. Companies conducting Tier 1 offerings do not have ongoing reporting requirements other than filing a final report to disclose the termination or completion of the offering while companies conducting Tier 2 offerings do have ongoing reporting requirements. Form Description 1-A Offering statement \u2013 This includes the offering circular, the document given to investors that provides important disclosures about the company and the offering. 1-Z Exit report \u2013 This details the termination or completion of an offering. Companies conducting Tier 2 offerings can instead disclose this on Form 1-K. ** Ongoing Reporting for Tier-2 Companies ** 1-K Annual report \u2013 An annual report by the company that includes audited financial statements and a discussion of the company\u2019s financial results for the year. 1-SA Semiannual report \u2013 This report includes unaudited interim financial statements for the first six months of the company\u2019s fiscal year and a discussion of the company\u2019s financial results for the period. 1-U Current report \u2013 Filed to disclose certain events including a fundamental change, bankruptcy, change in accountant, non-reliance on prior financial statements or audit report, change in control, and departure of principal officers. Foreign Private Issuers Some public companies that are organized or formed outside of the United States, known under federal securities laws as foreign private issuers, may file reports with the SEC on different forms than those that must be filed by U.S. public companies. Form Description F-1 Registration statement \u2013 Foreign private issuers may elect to register a securities offering with this filing. 20-F Annual report or registration statement \u2013 This filing includes audited financial statements of the foreign private issuer and a discussion of the company\u2019s financial results. A check box on the cover page indicates whether the filing is for an annual report or to register a class of securities. 6-K Report \u2013 Filed in connection with press releases, communications to security holders, and any disclosures required to be made to security holders by the laws of the company\u2019s home country. Mutual Funds and ETFs Form Description N-1A/485 Registration statement (including a prospectus) \u2013 The prospectus includes information about a fund such as investment objectives/goals; a fee table; investment strategies and risks, and performance; advisers and portfolio managers; purchase and sale of fund shares; and tax information. 497K Summary prospectus \u2013 Summary disclosure document includes the same key information required in the beginning of the full prospectus. 497 Periodic update to fund prospectus \u2013 Includes periodic updates to the prospectus. N-CSRS/N-CSRS Annual/semi-annual shareholder reports \u2013 Describes how the fund has operated and includes the fund\u2019s holdings and financial statements. The annual report also discusses market conditions and investment strategies that significantly affected the fund\u2019s performance during its last fiscal year. DEF 14A Definitive proxy statement \u2013 Proxy statement sent in connection with matters to be voted on by fund shareholders at the fund\u2019s shareholder meeting. N-PX Proxy voting record \u2013 Identifies specific proposals that the fund was entitled to vote on for its underlying portfolio holdings and how the fund voted on each. N-PORT Schedule of portfolio holdings in exhibit to N-PORT\u2013 Includes a list of the fund\u2019s portfolio holdings for the first and third fiscal quarters, those not reported on Form N-CSR. N-14 Registration statement for fund mergers \u2013 Disclosure document includes information about a fund merger or other similar transaction. Variable Annuities Variable Annuities make some of the same or similar filings on EDGAR that mutual funds and ETFs do. For the best results, search by the marketing name of the variable annuity contract. Please note that insurance companies and their contracts may have similar names. To help ensure you are looking at the correct variable annuity, double check the name of the contract and the name of the insurance company. In addition to finding these filings on EDGAR, you can typically get them from the insurance company\u2019s website or your financial professional. Form Description N-4/485 Registration statement (including a prospectus) \u2013 The prospectus includes information about a variable annuity such as its fees, investment options, and insurance features, like death benefits or income protection. 497 Periodic update to variable annuity prospectus \u2013 Includes periodic updates to the prospectus.","title":"SEC Forms"},{"location":"SEC-Forms/#sec-forms","text":"","title":"SEC Forms"},{"location":"SEC-Forms/#financial-reports","text":"Domestic public companies file annual and quarterly reports, as well as current reports when certain events occur that require prompt disclosure. The annual and quarterly reports include financial statements for the relevant period. Form Description 10-K Annual report - provides audited annual financial statements, a discussion of material risk factors for the company and its business, and a management\u2019s discussion and analysis of the company\u2019s results of operations for the prior fiscal year. 10-Q Quarterly report \u2013 provides unaudited quarterly financial statements, updates regarding material risks that the company faces, and management\u2019s discussion and analysis of the company\u2019s results of operations for the prior fiscal quarter. 8-K Current report \u2013 discloses material events or information that the company chooses or is required to make public prior to its next scheduled quarterly or annual report.","title":"Financial Reports"},{"location":"SEC-Forms/#shareholder-meetings","text":"Public companies, mutual funds, and ETFs that are subject to SEC proxy rules send proxy statements to their shareholders to solicit their votes at shareholder meetings. Proxy statements describe the matters to be voted on at the meeting and may include compensation and other information about the company\u2019s or fund\u2019s board and executive officers. The proxy statements of domestic public companies, mutual funds, and ETFs subject to SEC proxy rules can be found on EDGAR. Form Description PRE 14A Preliminary proxy statement \u2013 A preliminary proxy statement subject to review by the SEC staff. DEF 14A Definitive proxy statement \u2013 The final proxy statement sent to the company\u2019s shareholders in connection with the company\u2019s shareholder meeting.","title":"Shareholder Meetings"},{"location":"SEC-Forms/#executive-compensation","text":"Domestic public companies regularly disclose the compensation of their chief executive officer and other highly paid executives, and describe their executive and board compensation policies. Form Description DEF 14A Definitive proxy statement \u2013 Companies subject to the proxy rules will typically provide detailed compensation disclosure, including a compensation discussion and analysis section, in their annual proxy statement. 10-K Annual report \u2013 If the compensation disclosure isn\u2019t found in the proxy statement or the company has not filed a proxy statement, the annual report on Form 10-K should include the disclosure. 8-K Current report \u2013 Changes to compensation for certain executive officers requires disclosure under Item 5.02 of this report. EDGAR search results for reports on Form 8-K show the item numbers included in each report.","title":"Executive Compensation"},{"location":"SEC-Forms/#insider-transactions","text":"Corporate insiders\u2014officers, directors, and holders of more than 10 percent of a class of the company\u2019s registered equity securities\u2014must regularly disclose holdings and transactions in all equity securities of that company. Form Description 3 Initial statement of beneficial ownership \u2013 An initial statement of holdings in the company\u2019s equity securities 4 Disclosure of transactions in the company\u2019s equity securities within two business days of the transaction 5 Annual statement of beneficial ownership \u2013 Annual statement of holdings in the company\u2019s equity securities.","title":"Insider Transactions"},{"location":"SEC-Forms/#beneficial-ownership-interest","text":"Any person or group of persons that acquires beneficial ownership of more than five percent of a class of a public company\u2019s registered voting securities must disclose their holdings. In addition, companies regularly disclose who their significant shareholders are and institutional investment managers, such as managers of mutual funds, hedge funds, or pensions, regularly disclose their holdings. Form Description SC 13D Schedule 13D beneficial ownership report \u2013 Filed when a party acquires more than five percent of a class of a company\u2019s registered voting securities; also used to disclose any subsequent changes to their holdings. SC 13G Schedule 13G beneficial ownership report \u2013 Filed when a party acquires more than five percent of a class of a company\u2019s registered voting securities as a passive investment. DEF 14A Definitive proxy statement \u2013 Here, companies are required to disclose the amount of equity securities beneficially owned by their directors and officers, and any person or group that beneficially owns more than five percent of any class of the company\u2019s voting securities. 13F-HR Institutional investment manager report \u2013 Institutional investment managers disclose their holdings and any changes to them on a quarterly basis.","title":"Beneficial Ownership Interest"},{"location":"SEC-Forms/#business-combination","text":"Depending on how a merger or acquisition is structured, different types of filings may be required by the companies involved in the transaction. Common form types filed in connection with a business combination include the following. Form Description PRE 14A Preliminary proxy statement relating to a merger or acquisition \u2013 A preliminary proxy statement, which remains subject to review by the SEC staff, filed in connection with a merger or acquisition. DEF 14A Definitive proxy statement \u2013 The final proxy statement sent to the company\u2019s shareholders in connection with the company\u2019s shareholder meeting. S-$ Registration statement \u2013 A registration statement is required when a company is making a merger or acquisition. 425 Prospectuses and communications \u2013 Written disclosures and communications in connection with a business combination where securities are part of the consideration. SC TO-T Tender offer statement by third party/issuer \u2013 A tender offer statement is filed by a party that is offering to buy outstanding shares of a public company from its shareholders. SC TO-I Tender offer solicitation/recommendation statements \u2013 A filing required to disclose the target company\u2019s recommendation on the tender offer. SC 14D9 Tender offer statement by third party/issuer \u2013 A tender offer statement is filed by a party that is offering to buy outstanding shares of a public company from its shareholders. 8-K Current report \u2013 Certain information about business combinations may be disclosed in a Form 8-K filing, such as the initial signing of a merger agreement or, if an acquisition doesn\u2019t require shareholder approval, information about the company being acquired.","title":"Business Combination"},{"location":"SEC-Forms/#public-offerings","text":"In order to register an offer and sale of securities to the public with the SEC, a company must file a registration statement. The first time a company publicly offers and sells its securities is known as its initial public offering. A prospectus, which often is a large part of the registration statement, is the document given to investors that discloses information about the company and the offering. Form Description S-1 Registration statement \u2013 Filed to register the offer and sale of securities to the public often in connection with an initial public offering. S-3 Short-form registration statement \u2013 An abbreviated registration statement available to certain already-reporting companies to register the offer and sale of securities to the public. 424B[#] Prospectus \u2013 A document disclosing information about the company and the offering that typically comprises a large part of the registration statement. UPLOAD Publicly released written correspondence from the SEC staff to the company during a review process, including a review of a company\u2019s registration statement for its initial public offering. CORRESP Publicly released correspondence from the company and its advisers to the SEC staff typically during a review process.","title":"Public Offerings"},{"location":"SEC-Forms/#crowdfunding","text":"Crowdfunding is a way to raise money from small individual investments or contributions from a large number of people. Companies that offer and sell securities to the public in reliance on an exemption from registration for securities-based crowdfunding must make filings on EDGAR. Form Description C Offering statement \u2013 Disclosure by the company making a crowdfunding offering that contains information about itself and the offering. C-U Progress updates \u2013 Disclosure during the offering about the status of meeting the target offering amount (unless the intermediary provides updates on its online platform) and the final amount of securities sold. C-AR Annual report \u2013 An annual report by the company that includes financial statements. C-TR Termination of reporting \u2013 If eligible, a filing by the company terminating its obligation to file annual reports.","title":"Crowdfunding"},{"location":"SEC-Forms/#regulation-a-offerings","text":"Regulation A allows eligible companies raising $50 million or less in a 12-month period to offer securities to the public with more limited disclosure than what is required in a registered securities offering. Companies conducting Regulation A offerings are subject to Tier 1 or Tier 2 requirements depending on how much capital they plan to raise in the offering. Companies conducting Tier 1 offerings do not have ongoing reporting requirements other than filing a final report to disclose the termination or completion of the offering while companies conducting Tier 2 offerings do have ongoing reporting requirements. Form Description 1-A Offering statement \u2013 This includes the offering circular, the document given to investors that provides important disclosures about the company and the offering. 1-Z Exit report \u2013 This details the termination or completion of an offering. Companies conducting Tier 2 offerings can instead disclose this on Form 1-K. ** Ongoing Reporting for Tier-2 Companies ** 1-K Annual report \u2013 An annual report by the company that includes audited financial statements and a discussion of the company\u2019s financial results for the year. 1-SA Semiannual report \u2013 This report includes unaudited interim financial statements for the first six months of the company\u2019s fiscal year and a discussion of the company\u2019s financial results for the period. 1-U Current report \u2013 Filed to disclose certain events including a fundamental change, bankruptcy, change in accountant, non-reliance on prior financial statements or audit report, change in control, and departure of principal officers.","title":"Regulation A Offerings"},{"location":"SEC-Forms/#foreign-private-issuers","text":"Some public companies that are organized or formed outside of the United States, known under federal securities laws as foreign private issuers, may file reports with the SEC on different forms than those that must be filed by U.S. public companies. Form Description F-1 Registration statement \u2013 Foreign private issuers may elect to register a securities offering with this filing. 20-F Annual report or registration statement \u2013 This filing includes audited financial statements of the foreign private issuer and a discussion of the company\u2019s financial results. A check box on the cover page indicates whether the filing is for an annual report or to register a class of securities. 6-K Report \u2013 Filed in connection with press releases, communications to security holders, and any disclosures required to be made to security holders by the laws of the company\u2019s home country.","title":"Foreign Private Issuers"},{"location":"SEC-Forms/#mutual-funds-and-etfs","text":"Form Description N-1A/485 Registration statement (including a prospectus) \u2013 The prospectus includes information about a fund such as investment objectives/goals; a fee table; investment strategies and risks, and performance; advisers and portfolio managers; purchase and sale of fund shares; and tax information. 497K Summary prospectus \u2013 Summary disclosure document includes the same key information required in the beginning of the full prospectus. 497 Periodic update to fund prospectus \u2013 Includes periodic updates to the prospectus. N-CSRS/N-CSRS Annual/semi-annual shareholder reports \u2013 Describes how the fund has operated and includes the fund\u2019s holdings and financial statements. The annual report also discusses market conditions and investment strategies that significantly affected the fund\u2019s performance during its last fiscal year. DEF 14A Definitive proxy statement \u2013 Proxy statement sent in connection with matters to be voted on by fund shareholders at the fund\u2019s shareholder meeting. N-PX Proxy voting record \u2013 Identifies specific proposals that the fund was entitled to vote on for its underlying portfolio holdings and how the fund voted on each. N-PORT Schedule of portfolio holdings in exhibit to N-PORT\u2013 Includes a list of the fund\u2019s portfolio holdings for the first and third fiscal quarters, those not reported on Form N-CSR. N-14 Registration statement for fund mergers \u2013 Disclosure document includes information about a fund merger or other similar transaction.","title":"Mutual Funds and ETFs"},{"location":"SEC-Forms/#variable-annuities","text":"Variable Annuities make some of the same or similar filings on EDGAR that mutual funds and ETFs do. For the best results, search by the marketing name of the variable annuity contract. Please note that insurance companies and their contracts may have similar names. To help ensure you are looking at the correct variable annuity, double check the name of the contract and the name of the insurance company. In addition to finding these filings on EDGAR, you can typically get them from the insurance company\u2019s website or your financial professional. Form Description N-4/485 Registration statement (including a prospectus) \u2013 The prospectus includes information about a variable annuity such as its fees, investment options, and insurance features, like death benefits or income protection. 497 Periodic update to variable annuity prospectus \u2013 Includes periodic updates to the prospectus.","title":"Variable Annuities"},{"location":"company-financials/","text":"Company Financials Getting company financials The easiest way to get company financials is to use the Company.financials property. from edgar import Company company = Company(\"AAPL\") financials = company.financials The financials property returns a Financials instance. This instance has methods that return the balance sheet, income statement and cash flow statement. balance_sheet = financials.balance_sheet income_statement = financials.income cash_flow_statement = financials.cash_flow Financials for multiple years The MultiFinancials class can be used to get financials for multiple years. To use it first you need to get the filings for the years you want. from edgar import MultiFinancials filings = company.latest(\"10-K\", 5) financials = MultiFinancials(filings) The financials property returns a MultiFinancials instance. This instance has methods that return the balance sheet, income statement and cash flow statement. balance_sheet = financials.balance_sheet income_statement = financials.income cash_flow_statement = financials.cash_flow","title":"Financials"},{"location":"company-financials/#company-financials","text":"","title":"Company Financials"},{"location":"company-financials/#getting-company-financials","text":"The easiest way to get company financials is to use the Company.financials property. from edgar import Company company = Company(\"AAPL\") financials = company.financials The financials property returns a Financials instance. This instance has methods that return the balance sheet, income statement and cash flow statement. balance_sheet = financials.balance_sheet income_statement = financials.income cash_flow_statement = financials.cash_flow","title":"Getting company financials"},{"location":"company-financials/#financials-for-multiple-years","text":"The MultiFinancials class can be used to get financials for multiple years. To use it first you need to get the filings for the years you want. from edgar import MultiFinancials filings = company.latest(\"10-K\", 5) financials = MultiFinancials(filings) The financials property returns a MultiFinancials instance. This instance has methods that return the balance sheet, income statement and cash flow statement. balance_sheet = financials.balance_sheet income_statement = financials.income cash_flow_statement = financials.cash_flow","title":"Financials for multiple years"},{"location":"data-objects/","text":"Data Objects Data Objects are a concept used in edgartools to contain the data from a filing. For example, a TenK object contains the data from a 10-K filin, and a ThirteenF object contains the data from a 13F-HR filing and so on. Data Objects are created by automatically downloading and parsing filings into data objects. Currently, the following forms are supported: Form Data Object Description 10-K TenK Annual report 10-Q TenQ Quarterly report 8-K EightK Current report MA-I MunicipalAdvisorForm Municipal advisor initial filing Form 144 Form144 Notice of proposed sale of securities C, C-U, C-AR, C-TR FormC Form C Crowdfunding Offering D FormD Form D Offering 3,4,5 Ownership Ownership reports 13F-HR ThirteenF 13F Holdings Report NPORT-P FundReport Fund Report EFFECT Effect Notice of Effectiveness And other filing with XBRL FilingXbrl Usage To get a data object for a filing, you can use the obj() method on a Filing object. For example, to get the data object for a 13F-HR filing you can do the following: from edgar import get_filings filings = get_filings() filing = filings[0] thirteen_f = filing.obj()","title":"Data Objects"},{"location":"data-objects/#data-objects","text":"Data Objects are a concept used in edgartools to contain the data from a filing. For example, a TenK object contains the data from a 10-K filin, and a ThirteenF object contains the data from a 13F-HR filing and so on. Data Objects are created by automatically downloading and parsing filings into data objects. Currently, the following forms are supported: Form Data Object Description 10-K TenK Annual report 10-Q TenQ Quarterly report 8-K EightK Current report MA-I MunicipalAdvisorForm Municipal advisor initial filing Form 144 Form144 Notice of proposed sale of securities C, C-U, C-AR, C-TR FormC Form C Crowdfunding Offering D FormD Form D Offering 3,4,5 Ownership Ownership reports 13F-HR ThirteenF 13F Holdings Report NPORT-P FundReport Fund Report EFFECT Effect Notice of Effectiveness And other filing with XBRL FilingXbrl","title":"Data Objects"},{"location":"data-objects/#usage","text":"To get a data object for a filing, you can use the obj() method on a Filing object. For example, to get the data object for a 13F-HR filing you can do the following: from edgar import get_filings filings = get_filings() filing = filings[0] thirteen_f = filing.obj()","title":"Usage"},{"location":"eightk-filings/","text":"Eight-K Filings Imagine having instant access to a company's most critical corporate updates the moment they happen! 8-K filings are real-time windows into significant corporate events, revealing everything from leadership changes to major business transformations. With edgartools , you can effortlessly retrieve and analyze these crucial SEC documents in just a few lines of Python code. Getting 8-K filings for a company The easiest way to get 8-K filings is to get access to a company object and use the latest function. You can restrict to the latest 5 filings by passing n as a parameter. This returns a Filings object with multiple filings so to get a single filing use the bracket [] operator e.g. filings[1] . c = Company(\"AAPL\") filings = filings.latest(\"8-K\", 5) To get the last filing use latest without n . This returns a single Filing object. filing = filings.latest(\"8-K\") Getting all 8-K filings Another way to get 8-K filings is to use get_filings(form=\"8-K\") . This gets all the filings for a company, but also allow for filtering by date filings = c.get_filings(form='8-K') Filtering by date You can also filter the filings by date using a range 'YYYY-MM-DD:YYYY-MM-DD' or from a specific date 'YYYY-MM-DD:' or before a specific date ':YYYY-MM-DD'. filings = c.get_filings(form='8-K', date='2022-01-01:') Viewing the 8-K filing Once you have the 8-K filing you can view it in the browser using filing.open() filing.open() You can also view it in the console using filing.view() filing.view() Viewing the filing exhibits 8-K filings often gave attached exhibits which contain the informnation the company is releasing in the filing. You can view the list of exhibits using filing.exhibits filing.exhibits Viewing a specific exhibit To select a specific exhibit use the bracket [] operator e.g. filing.exhibits[0] . This selects the first exhibit, so filing.exhibits[1] selects the second exhibit. To view the exhibit filing.exhibits[1].view() filing.exhibits[1].view() Downloading the exhibit To download the exhibit use filing.exhibits[1].download() . Note that this downloads the file into memory, while you may want to download to a path. To download to a path use filing.exhibits[1].download(path=\"path/to/save\") filing.exhibits[1].download()","title":"Eight-K Filings"},{"location":"eightk-filings/#eight-k-filings","text":"Imagine having instant access to a company's most critical corporate updates the moment they happen! 8-K filings are real-time windows into significant corporate events, revealing everything from leadership changes to major business transformations. With edgartools , you can effortlessly retrieve and analyze these crucial SEC documents in just a few lines of Python code.","title":"Eight-K Filings"},{"location":"eightk-filings/#getting-8-k-filings-for-a-company","text":"The easiest way to get 8-K filings is to get access to a company object and use the latest function. You can restrict to the latest 5 filings by passing n as a parameter. This returns a Filings object with multiple filings so to get a single filing use the bracket [] operator e.g. filings[1] . c = Company(\"AAPL\") filings = filings.latest(\"8-K\", 5) To get the last filing use latest without n . This returns a single Filing object. filing = filings.latest(\"8-K\")","title":"Getting 8-K filings for a company"},{"location":"eightk-filings/#getting-all-8-k-filings","text":"Another way to get 8-K filings is to use get_filings(form=\"8-K\") . This gets all the filings for a company, but also allow for filtering by date filings = c.get_filings(form='8-K')","title":"Getting all 8-K filings"},{"location":"eightk-filings/#filtering-by-date","text":"You can also filter the filings by date using a range 'YYYY-MM-DD:YYYY-MM-DD' or from a specific date 'YYYY-MM-DD:' or before a specific date ':YYYY-MM-DD'. filings = c.get_filings(form='8-K', date='2022-01-01:')","title":"Filtering by date"},{"location":"eightk-filings/#viewing-the-8-k-filing","text":"Once you have the 8-K filing you can view it in the browser using filing.open() filing.open() You can also view it in the console using filing.view() filing.view()","title":"Viewing the 8-K filing"},{"location":"eightk-filings/#viewing-the-filing-exhibits","text":"8-K filings often gave attached exhibits which contain the informnation the company is releasing in the filing. You can view the list of exhibits using filing.exhibits filing.exhibits","title":"Viewing the filing exhibits"},{"location":"eightk-filings/#viewing-a-specific-exhibit","text":"To select a specific exhibit use the bracket [] operator e.g. filing.exhibits[0] . This selects the first exhibit, so filing.exhibits[1] selects the second exhibit. To view the exhibit filing.exhibits[1].view() filing.exhibits[1].view()","title":"Viewing a specific exhibit"},{"location":"eightk-filings/#downloading-the-exhibit","text":"To download the exhibit use filing.exhibits[1].download() . Note that this downloads the file into memory, while you may want to download to a path. To download to a path use filing.exhibits[1].download(path=\"path/to/save\") filing.exhibits[1].download()","title":"Downloading the exhibit"},{"location":"filtering-filings/","text":"Filtering filings Filings can be filtered in many different ways like by form , date , CIK , ticker , and accession number . You also filter while getting filings using the get_filings function or after getting filings using the filter method. For the most part these approaches will give identical results, except that with get_filings you are filtering from all available filings in the SEC, while with filter you are reducing the nu,ber of filings in a Filings object. Filtering using parameters of get_filings You can filter using parameters of the get_filings function. Get filings by form To get filings of a specific form type like 10-K, you can use the form parameter. For example: filings = get_filings(form='10-K') The form can also be a list of forms. For example: filings = get_filings(form=['10-K', '10-Q']) By default the amendments parameter is set to True so that amended filings are included. You can set it to False to exclude amended filings. For example: filings = get_filings(form='10-K', amendments=False) Filtering by date You can filter filings by date using the filing_date parameter. For example: filings = get_filings(filing_date='2022-01-01') You can also filter by a range of dates. For example: filings = get_filings(filing_date='2022-01-01:2022-01-10') You can filter up to a date. For example: filings = get_filings(filing_date=':2022-01-10') as well as after a date. For example: filings = get_filings(filing_date='2022-01-10:') Filtering by CIK You can filter filings by CIK using the cik parameter to get all filings for a company. For example: filings = get_filings(cik='0000320193') Filtering by ticker You can filter filings by ticker using the ticker parameter. For example: filings = get_filings(ticker='AAPL') Note that this first does a lookup of the CIK for the ticker and then gets filings for the CIK. So if you know the CIK, it is better to use that directly. Filtering by exchange You can filter companies using the exchange parameter. filings = get_filings(exchange='NASDAQ') There are the following exchanges available: Exchange Nasdaq NYSE CBOE OTC Filtering using Filings.filter You can filter filings using the filter method after getting filings. This work mostly identically to filtering using get_filings . The difference is that filter reduces from an existing Filings object rather that the entire SEC. Example: filings().filter(form='10-K') def filter(self, *, form: Optional[Union[str, List[IntString]]] = None, amendments: bool = None, filing_date: Optional[str] = None, date: Optional[str] = None, cik: Union[IntString, List[IntString]] = None, exchange: Union[str, List[str], Exchange, List[Exchange]] = None, ticker: Union[str, List[str]] = None, accession_number: Union[str, List[str]] = None) -> Optional['Filings']: :param form: The form or list of forms to filter by :param amendments: Whether to include amendments to the forms e.g. include \"10-K/A\" :param filing_date: The filing date :param date: An alias for the filing date :param cik: The CIK or list of CIKs to filter by :param exchange: The exchange or list of exchanges to filter by :param ticker: The ticker or list of tickers to filter by :param accession_number: The accession number or list of accession numbers to filter by Using head , tail , and sample You can subset filings using the head and tail and sample methods. For example: filings = get_filings() filings.head(10) filings.tail(10) filings.sample(10)","title":"Filtering"},{"location":"filtering-filings/#filtering-filings","text":"Filings can be filtered in many different ways like by form , date , CIK , ticker , and accession number . You also filter while getting filings using the get_filings function or after getting filings using the filter method. For the most part these approaches will give identical results, except that with get_filings you are filtering from all available filings in the SEC, while with filter you are reducing the nu,ber of filings in a Filings object.","title":"Filtering filings"},{"location":"filtering-filings/#filtering-using-parameters-of-get_filings","text":"You can filter using parameters of the get_filings function.","title":"Filtering using parameters of get_filings"},{"location":"filtering-filings/#get-filings-by-form","text":"To get filings of a specific form type like 10-K, you can use the form parameter. For example: filings = get_filings(form='10-K') The form can also be a list of forms. For example: filings = get_filings(form=['10-K', '10-Q']) By default the amendments parameter is set to True so that amended filings are included. You can set it to False to exclude amended filings. For example: filings = get_filings(form='10-K', amendments=False)","title":"Get filings by form"},{"location":"filtering-filings/#filtering-by-date","text":"You can filter filings by date using the filing_date parameter. For example: filings = get_filings(filing_date='2022-01-01') You can also filter by a range of dates. For example: filings = get_filings(filing_date='2022-01-01:2022-01-10') You can filter up to a date. For example: filings = get_filings(filing_date=':2022-01-10') as well as after a date. For example: filings = get_filings(filing_date='2022-01-10:')","title":"Filtering by date"},{"location":"filtering-filings/#filtering-by-cik","text":"You can filter filings by CIK using the cik parameter to get all filings for a company. For example: filings = get_filings(cik='0000320193')","title":"Filtering by CIK"},{"location":"filtering-filings/#filtering-by-ticker","text":"You can filter filings by ticker using the ticker parameter. For example: filings = get_filings(ticker='AAPL') Note that this first does a lookup of the CIK for the ticker and then gets filings for the CIK. So if you know the CIK, it is better to use that directly.","title":"Filtering by ticker"},{"location":"filtering-filings/#filtering-by-exchange","text":"You can filter companies using the exchange parameter. filings = get_filings(exchange='NASDAQ') There are the following exchanges available: Exchange Nasdaq NYSE CBOE OTC","title":"Filtering by exchange"},{"location":"filtering-filings/#filtering-using-filingsfilter","text":"You can filter filings using the filter method after getting filings. This work mostly identically to filtering using get_filings . The difference is that filter reduces from an existing Filings object rather that the entire SEC. Example: filings().filter(form='10-K') def filter(self, *, form: Optional[Union[str, List[IntString]]] = None, amendments: bool = None, filing_date: Optional[str] = None, date: Optional[str] = None, cik: Union[IntString, List[IntString]] = None, exchange: Union[str, List[str], Exchange, List[Exchange]] = None, ticker: Union[str, List[str]] = None, accession_number: Union[str, List[str]] = None) -> Optional['Filings']: :param form: The form or list of forms to filter by :param amendments: Whether to include amendments to the forms e.g. include \"10-K/A\" :param filing_date: The filing date :param date: An alias for the filing date :param cik: The CIK or list of CIKs to filter by :param exchange: The exchange or list of exchanges to filter by :param ticker: The ticker or list of tickers to filter by :param accession_number: The accession number or list of accession numbers to filter by","title":"Filtering using Filings.filter"},{"location":"filtering-filings/#using-head-tail-and-sample","text":"You can subset filings using the head and tail and sample methods. For example: filings = get_filings() filings.head(10) filings.tail(10) filings.sample(10)","title":"Using head, tail, and sample"},{"location":"local-data/","text":"Dowloading to Local Storage When you use edgartools to get Company, or the html content of a filing, this usually results in one of more requests to the SEC. However, you can download data in bulk to local storage to minimize these requests and speed up processing. This includes the following data Data Descriptionn Company Submissions Company metadata, their 1000 most recent filings Company Facts Company facts Filing Attachments Filing attachments Reference data Reference data like company and mutual fund tickers, exchanges etc Local Data Directory The local data directory is the directory where the data is stored. The default directory is <USER_HOME>/.edgar You can change this directory by setting the EDGAR_LOCAL_DATA_DIR environment variable. export EDGAR_LOCAL_DATA_DIR=\"/path/to/local/data\" Using local storage By default local storage is not used and the library will access the data from the SEC website. To use local storage you have to Download data using download_edgar_data() Turn on local storage using the environment variable EDGAR_USE_LOCAL_DATA or by calling use_local_storage() Downloading data to local storage You can download data to local storage by calling the download_edgar_data() function. The function takes the following parameters so you have the option to download only the data you need. def download_edgar_data(submissions: bool = True, facts: bool = True, reference: bool = True): Downloading Complete Filings You can download filings to local storage by calling the download_filings() function. This will download for each filing a complete SGML text file that contains all the attachments for that filing. These will be placed in the directory EDGAR_LOCAL_DATA_DIR/filings/YYYYMMDD . If local storage is enabled, edgartools will first check if the filing is available in local storage before making a request to the SEC. This will speed up processing and for the most part calls like html() and text() will behave transparently. Note that there are some differences between local attachments and attachments when doownloaded from the SEC. Downloading by dates The download_filings(filing_date) function accepts a filing date that can be a single date or a range of dates. The date format must be YYYY-MM-DD or YYYY-MM-DD:YYYY-MM-DD . You can also use open ended ranges like YYYY-MM-DD: or :YYYY-MM-DD . Note that downloading filing attachment files can take a long time so be prepared when downloading for a range of dates. Accessing the downloaded filings When you call filing.attachments on a locally downloaded filing, you will have access to the attachments that were downloaded. If you want to have each file independently you can use attachments.download() . def download(self, path: Union[str, Path], archive: bool = False): \"\"\" Download all the attachments to a specified path. If the path is a directory, the file is saved with its original name in that directory. If the path is a file, the file is saved with the given path name. If archive is True, the attachments are saved in a zip file. path: str or Path - The path to save the attachments archive: bool (default False) - If True, save the attachments in a zip file \"\"\"","title":"Dowloading to Local Storage"},{"location":"local-data/#dowloading-to-local-storage","text":"When you use edgartools to get Company, or the html content of a filing, this usually results in one of more requests to the SEC. However, you can download data in bulk to local storage to minimize these requests and speed up processing. This includes the following data Data Descriptionn Company Submissions Company metadata, their 1000 most recent filings Company Facts Company facts Filing Attachments Filing attachments Reference data Reference data like company and mutual fund tickers, exchanges etc","title":"Dowloading to Local Storage"},{"location":"local-data/#local-data-directory","text":"The local data directory is the directory where the data is stored. The default directory is <USER_HOME>/.edgar You can change this directory by setting the EDGAR_LOCAL_DATA_DIR environment variable. export EDGAR_LOCAL_DATA_DIR=\"/path/to/local/data\"","title":"Local Data Directory"},{"location":"local-data/#using-local-storage","text":"By default local storage is not used and the library will access the data from the SEC website. To use local storage you have to Download data using download_edgar_data() Turn on local storage using the environment variable EDGAR_USE_LOCAL_DATA or by calling use_local_storage()","title":"Using local storage"},{"location":"local-data/#downloading-data-to-local-storage","text":"You can download data to local storage by calling the download_edgar_data() function. The function takes the following parameters so you have the option to download only the data you need. def download_edgar_data(submissions: bool = True, facts: bool = True, reference: bool = True):","title":"Downloading data to local storage"},{"location":"local-data/#downloading-complete-filings","text":"You can download filings to local storage by calling the download_filings() function. This will download for each filing a complete SGML text file that contains all the attachments for that filing. These will be placed in the directory EDGAR_LOCAL_DATA_DIR/filings/YYYYMMDD . If local storage is enabled, edgartools will first check if the filing is available in local storage before making a request to the SEC. This will speed up processing and for the most part calls like html() and text() will behave transparently. Note that there are some differences between local attachments and attachments when doownloaded from the SEC.","title":"Downloading Complete Filings"},{"location":"local-data/#downloading-by-dates","text":"The download_filings(filing_date) function accepts a filing date that can be a single date or a range of dates. The date format must be YYYY-MM-DD or YYYY-MM-DD:YYYY-MM-DD . You can also use open ended ranges like YYYY-MM-DD: or :YYYY-MM-DD . Note that downloading filing attachment files can take a long time so be prepared when downloading for a range of dates.","title":"Downloading by dates"},{"location":"local-data/#accessing-the-downloaded-filings","text":"When you call filing.attachments on a locally downloaded filing, you will have access to the attachments that were downloaded. If you want to have each file independently you can use attachments.download() . def download(self, path: Union[str, Path], archive: bool = False): \"\"\" Download all the attachments to a specified path. If the path is a directory, the file is saved with its original name in that directory. If the path is a file, the file is saved with the given path name. If archive is True, the attachments are saved in a zip file. path: str or Path - The path to save the attachments archive: bool (default False) - If True, save the attachments in a zip file \"\"\"","title":"Accessing the downloaded filings"},{"location":"navigating-filings/","text":"Navigating Filings Paginating filings The Filings object is a container for a list of filings. The list of filings can be large but by default you can only see the first page of filings. To change the page, you can paginate filings using the next and prev methods. For example: filings = get_filings() filings.next() filings.prev() Looping through filings You can loop through filings using the for loop. For example: filings = get_filings() for filing in filings: # Do something with the filing Getting Related Filings Filings can be related to other filings using the file number. In some cases this relationship can be meaningful, as in they represent a group of filings for a specific securities offering. The link between the filing is via the file_number attribute of the filing, which is an identifier that the SEC uses to group filings. You can get related filings using the get_related_filings method. For example: filing = get_filing('0000320193-22-000002') filings = filing.related_filings()","title":"Navigating"},{"location":"navigating-filings/#navigating-filings","text":"","title":"Navigating Filings"},{"location":"navigating-filings/#paginating-filings","text":"The Filings object is a container for a list of filings. The list of filings can be large but by default you can only see the first page of filings. To change the page, you can paginate filings using the next and prev methods. For example: filings = get_filings() filings.next() filings.prev()","title":"Paginating filings"},{"location":"navigating-filings/#looping-through-filings","text":"You can loop through filings using the for loop. For example: filings = get_filings() for filing in filings: # Do something with the filing","title":"Looping through filings"},{"location":"navigating-filings/#getting-related-filings","text":"Filings can be related to other filings using the file number. In some cases this relationship can be meaningful, as in they represent a group of filings for a specific securities offering. The link between the filing is via the file_number attribute of the filing, which is an identifier that the SEC uses to group filings. You can get related filings using the get_related_filings method. For example: filing = get_filing('0000320193-22-000002') filings = filing.related_filings()","title":"Getting Related Filings"},{"location":"ownership/","text":"Ownership Documents Ownership documents are SEC forms that contain information about ownership of securities. Ownership Forms Form Description 3 Initial statement of beneficial ownership of securities 4 Statement of changes of beneficial ownership of securities 5 Annual statement of changes in beneficial ownership of securities The module edgar.ownership module parses XML into an OwnershipDocument instance, containing data about transactions and holdings. Getting Ownership Documents get a form 3 , 4 , or 5 filing get the xml document call OwnershipDocument.from_xml() from edgar import CompanyData from edgar.ownership import Ownership # Get Snowflake company = CompanyData.for_ticker(\"SNOW\") # Get Form 4 filings for Snowflake filings = company.get_filings(form=\"4\") # Get the first filing filing = filings[0] # Get the filing xml xml = filing.xml() # Now get the OwnershipDocument ownership = Ownership.from_xml(xml) Derivative Table This contains data on derivative holdings and transactions. To access it call ownership_document.derivatives . Derivative Holdings To access derivative transactions use ownership.derivatives.holdings Derivative Transactions To access derivative transactions use ownership.derivatives.transactions You can access individual transaction using the [] notation. ownership.derivative_table.transactions[0] Non Derivative Table This contains data on non-derivative holdings and transactions. To access it call ownership_document.non_ derivatives . Non Derivative Holdings To access derivative holdings use ownership.non_derivatives.holdings You can access individual holdings using the [] notation. holding = ownership.non_derivative_table.holdings[0] holding Non Derivative Transactions To access derivative transactions use ownership.non_derivatives.transactions You can access individual transactions using the [] notation. transaction = ownership.non_derivative_table.transactions[0] transaction","title":"Ownership Documents"},{"location":"ownership/#ownership-documents","text":"Ownership documents are SEC forms that contain information about ownership of securities.","title":"Ownership Documents"},{"location":"ownership/#ownership-forms","text":"Form Description 3 Initial statement of beneficial ownership of securities 4 Statement of changes of beneficial ownership of securities 5 Annual statement of changes in beneficial ownership of securities The module edgar.ownership module parses XML into an OwnershipDocument instance, containing data about transactions and holdings.","title":"Ownership Forms"},{"location":"ownership/#getting-ownership-documents","text":"get a form 3 , 4 , or 5 filing get the xml document call OwnershipDocument.from_xml() from edgar import CompanyData from edgar.ownership import Ownership # Get Snowflake company = CompanyData.for_ticker(\"SNOW\") # Get Form 4 filings for Snowflake filings = company.get_filings(form=\"4\") # Get the first filing filing = filings[0] # Get the filing xml xml = filing.xml() # Now get the OwnershipDocument ownership = Ownership.from_xml(xml)","title":"Getting Ownership Documents"},{"location":"ownership/#derivative-table","text":"This contains data on derivative holdings and transactions. To access it call ownership_document.derivatives .","title":"Derivative Table"},{"location":"ownership/#derivative-holdings","text":"To access derivative transactions use ownership.derivatives.holdings","title":"Derivative Holdings"},{"location":"ownership/#derivative-transactions","text":"To access derivative transactions use ownership.derivatives.transactions You can access individual transaction using the [] notation. ownership.derivative_table.transactions[0]","title":"Derivative Transactions"},{"location":"ownership/#non-derivative-table","text":"This contains data on non-derivative holdings and transactions. To access it call ownership_document.non_ derivatives .","title":"Non Derivative Table"},{"location":"ownership/#non-derivative-holdings","text":"To access derivative holdings use ownership.non_derivatives.holdings You can access individual holdings using the [] notation. holding = ownership.non_derivative_table.holdings[0] holding","title":"Non Derivative Holdings"},{"location":"ownership/#non-derivative-transactions","text":"To access derivative transactions use ownership.non_derivatives.transactions You can access individual transactions using the [] notation. transaction = ownership.non_derivative_table.transactions[0] transaction","title":"Non Derivative Transactions"},{"location":"parsing-filing-data/","text":"Parsing Filing Data An SEC filing represents information a company wishes to make public. The information is sometimes contained in data files attached to the filing, such as XBRL, XML or JSON. In edgartools each Filing has a .obj() function that converts the filing to a parsed version of the data file. For example, the following code converts the filing for the 10-K for Apple Inc. to a TenK object containing the data from the filing: from edgar import get_filings filings = get_filings(form=\"10-K\") filing = filings[0] tenk = filing.obj() Under the hood, the .obj() function gets the data file for the filing, which is usually the filing's XML, parses it, and converts it to the approaptate data object. If a filing has no corresponding data object, the .obj() function returns None Filing types with data objects The following table lists the filing types that have data objects: Filing type Data object Description 10-K TenK Annual report 10-Q TenQ Quarterly report 8-K EightK Current report 144 Form144 Insider trading report 3,4,5 Ownership Insider trading report D Effect Effect filing for the Form D NPORT NPORT Investment company report 13F-HR ThirteenF Institutional investment manager's report Any other filing with XBRL XbrlFiling XBRL filing object with the data Ownership Documents Ownership documents are SEC forms that contain information about ownership of securities. Ownership Forms Form Description 3 Initial statement of beneficial ownership of securities 4 Statement of changes of beneficial ownership of securities 5 Annual statement of changes in beneficial ownership of securities The module edgar.ownership module parses XML into an OwnershipDocument instance, containing data about transactions and holdings. Getting Ownership Documents get a form 3 , 4 , or 5 filing get the xml document call OwnershipDocument.from_xml() from edgar import CompanyData from edgar.ownership import Ownership # Get Snowflake company = CompanyData.for_ticker(\"SNOW\") # Get Form 4 filings for Snowflake filings = company.get_filings(form=\"4\") # Get the first filing filing = filings[0] # Get the filing xml xml = filing.xml() # Now get the OwnershipDocument ownership = Ownership.from_xml(xml) Derivative Table This contains data on derivative holdings and transactions. To access it call ownership_document.derivatives . Derivative Holdings To access derivative transactions use ownership.derivatives.holdings Derivative Transactions To access derivative transactions use ownership.derivatives.transactions You can access individual transaction using the [] notation. ownership.derivative_table.transactions[0] Non Derivative Table This contains data on non-derivative holdings and transactions. To access it call ownership_document.non_ derivatives . Non Derivative Holdings To access derivative holdings use ownership.non_derivatives.holdings You can access individual holdings using the [] notation. holding = ownership.non_derivative_table.holdings[0] holding Non Derivative Transactions To access derivative transactions use ownership.non_derivatives.transactions You can access individual transactions using the [] notation. transaction = ownership.non_derivative_table.transactions[0] transaction","title":"Parsing Filing Data"},{"location":"parsing-filing-data/#parsing-filing-data","text":"An SEC filing represents information a company wishes to make public. The information is sometimes contained in data files attached to the filing, such as XBRL, XML or JSON. In edgartools each Filing has a .obj() function that converts the filing to a parsed version of the data file. For example, the following code converts the filing for the 10-K for Apple Inc. to a TenK object containing the data from the filing: from edgar import get_filings filings = get_filings(form=\"10-K\") filing = filings[0] tenk = filing.obj() Under the hood, the .obj() function gets the data file for the filing, which is usually the filing's XML, parses it, and converts it to the approaptate data object. If a filing has no corresponding data object, the .obj() function returns None","title":"Parsing Filing Data"},{"location":"parsing-filing-data/#filing-types-with-data-objects","text":"The following table lists the filing types that have data objects: Filing type Data object Description 10-K TenK Annual report 10-Q TenQ Quarterly report 8-K EightK Current report 144 Form144 Insider trading report 3,4,5 Ownership Insider trading report D Effect Effect filing for the Form D NPORT NPORT Investment company report 13F-HR ThirteenF Institutional investment manager's report Any other filing with XBRL XbrlFiling XBRL filing object with the data","title":"Filing types with data objects"},{"location":"parsing-filing-data/#ownership-documents","text":"Ownership documents are SEC forms that contain information about ownership of securities.","title":"Ownership Documents"},{"location":"parsing-filing-data/#ownership-forms","text":"Form Description 3 Initial statement of beneficial ownership of securities 4 Statement of changes of beneficial ownership of securities 5 Annual statement of changes in beneficial ownership of securities The module edgar.ownership module parses XML into an OwnershipDocument instance, containing data about transactions and holdings.","title":"Ownership Forms"},{"location":"parsing-filing-data/#getting-ownership-documents","text":"get a form 3 , 4 , or 5 filing get the xml document call OwnershipDocument.from_xml() from edgar import CompanyData from edgar.ownership import Ownership # Get Snowflake company = CompanyData.for_ticker(\"SNOW\") # Get Form 4 filings for Snowflake filings = company.get_filings(form=\"4\") # Get the first filing filing = filings[0] # Get the filing xml xml = filing.xml() # Now get the OwnershipDocument ownership = Ownership.from_xml(xml)","title":"Getting Ownership Documents"},{"location":"parsing-filing-data/#derivative-table","text":"This contains data on derivative holdings and transactions. To access it call ownership_document.derivatives .","title":"Derivative Table"},{"location":"parsing-filing-data/#derivative-holdings","text":"To access derivative transactions use ownership.derivatives.holdings","title":"Derivative Holdings"},{"location":"parsing-filing-data/#derivative-transactions","text":"To access derivative transactions use ownership.derivatives.transactions You can access individual transaction using the [] notation. ownership.derivative_table.transactions[0]","title":"Derivative Transactions"},{"location":"parsing-filing-data/#non-derivative-table","text":"This contains data on non-derivative holdings and transactions. To access it call ownership_document.non_ derivatives .","title":"Non Derivative Table"},{"location":"parsing-filing-data/#non-derivative-holdings","text":"To access derivative holdings use ownership.non_derivatives.holdings You can access individual holdings using the [] notation. holding = ownership.non_derivative_table.holdings[0] holding","title":"Non Derivative Holdings"},{"location":"parsing-filing-data/#non-derivative-transactions","text":"To access derivative transactions use ownership.non_derivatives.transactions You can access individual transactions using the [] notation. transaction = ownership.non_derivative_table.transactions[0] transaction","title":"Non Derivative Transactions"},{"location":"using-the-company-api/","text":"Companies With the company API you find a company using the cik or ticker . From the company you can access all their historical filings , and a dataset of the company facts . The SEC's company API also supplies a lot more details about a company including industry, the SEC filer type, the mailing and business address and much more. Find a company using the cik The cik is the id that uniquely identifies a company at the SEC. It is a number, but is sometimes shown in SEC Edgar resources as a string padded with leading zero's. For the edgar client API, just use the numbers and omit the leading zeroes. company = Company(1318605) Find a company using ticker You can get a company using a ticker e.g. SNOW . This will do a lookup for the company cik using the ticker, then load the company using the cik. This makes it two calls versus one for the cik company lookup, but is sometimes more convenient since tickers are easier to remember that ciks. Note that some companies have multiple tickers, so you technically cannot get SEC filings for a ticker. You instead get the SEC filings for the company to which the ticker belongs. The ticker is case-insensitive so you can use Company(\"snow\") or Company(\"SNOW\") snow = Company(\"snow\") Company(1832950) Get filings for a company To get the company's filings use get_filings() . This gets all the company's filings that are available from the Edgar submissions endpoint. company.get_filings() Filtering filings You can filter the company filings using a number of different parameters. class CompanyFilings: ... def get_filings(self, *, form: str | List = None, accession_number: str | List = None, file_number: str | List = None, is_xbrl: bool = None, is_inline_xbrl: bool = None ): \"\"\" Get the company's filings and optionally filter by multiple criteria :param form: The form as a string e.g. '10-K' or List of strings ['10-Q', '10-K'] :param accession_number: The accession number that uniquely identifies an SEC filing e.g. 0001640147-22-000100 :param file_number: The file number e.g. 001-39504 :param is_xbrl: Whether the filing is xbrl :param is_inline_xbrl: Whether the filing is inline_xbrl :return: The CompanyFiling instance with the filings that match the filters \"\"\" The CompanyFilings class The result of get_filings() is a CompanyFilings class. This class contains a pyarrow table with the filings and provides convenient functions for working with filings. You can access the underlying pyarrow Table using the .data property filings = company.get_filings() # Get the underlying Table data: pa.Table = filings.data Get a filing by index To access a filing in the CompanyFilings use the bracket [] notation e.g. filings[2] filings[2] Get the latest filing The CompanyFilings class has a latest function that will return the latest Filing . So, to get the latest 10-Q filing, you do the following # Latest filing makes sense if you filter by form type e.g. 10-Q snow_10Qs = snow.get_filings(form='10-Q') latest_10Q = snow_10Qs.latest() # Or chain the function calls snow.get_filings(form='10-Q').latest() Get company facts Facts are an interesting and important dataset about a company accumlated from data the company provides to the SEC. Company facts are available for a company on the Company Facts f\"https://data.sec.gov/api/xbrl/companyfacts/CIK{cik:010}.json\" It is a JSON endpoint and edgartools parses the JSON into a structured dataset - a pyarrow.Table . Getting facts for a company To get company facts, first get the company, then call company.get_facts() company = Company(\"SNOW\") company_facts = company.get_facts_for_namespace() The result is a CompanyFacts object which wraps the underlying facts and provides convenient ways of working with the facts data. To get access to the underyling data use the facts property. You can get the facts as a pandas dataframe by calling to_pandas df = company_facts.to_pandas() Facts differ among companies. To see what facts are available you can use the facts_meta property.","title":"Companies"},{"location":"using-the-company-api/#companies","text":"With the company API you find a company using the cik or ticker . From the company you can access all their historical filings , and a dataset of the company facts . The SEC's company API also supplies a lot more details about a company including industry, the SEC filer type, the mailing and business address and much more.","title":"Companies"},{"location":"using-the-company-api/#find-a-company-using-the-cik","text":"The cik is the id that uniquely identifies a company at the SEC. It is a number, but is sometimes shown in SEC Edgar resources as a string padded with leading zero's. For the edgar client API, just use the numbers and omit the leading zeroes. company = Company(1318605)","title":"Find a company using the cik"},{"location":"using-the-company-api/#find-a-company-using-ticker","text":"You can get a company using a ticker e.g. SNOW . This will do a lookup for the company cik using the ticker, then load the company using the cik. This makes it two calls versus one for the cik company lookup, but is sometimes more convenient since tickers are easier to remember that ciks. Note that some companies have multiple tickers, so you technically cannot get SEC filings for a ticker. You instead get the SEC filings for the company to which the ticker belongs. The ticker is case-insensitive so you can use Company(\"snow\") or Company(\"SNOW\") snow = Company(\"snow\") Company(1832950)","title":"Find a company using ticker"},{"location":"using-the-company-api/#get-filings-for-a-company","text":"To get the company's filings use get_filings() . This gets all the company's filings that are available from the Edgar submissions endpoint. company.get_filings()","title":"Get filings for a company"},{"location":"using-the-company-api/#filtering-filings","text":"You can filter the company filings using a number of different parameters. class CompanyFilings: ... def get_filings(self, *, form: str | List = None, accession_number: str | List = None, file_number: str | List = None, is_xbrl: bool = None, is_inline_xbrl: bool = None ): \"\"\" Get the company's filings and optionally filter by multiple criteria :param form: The form as a string e.g. '10-K' or List of strings ['10-Q', '10-K'] :param accession_number: The accession number that uniquely identifies an SEC filing e.g. 0001640147-22-000100 :param file_number: The file number e.g. 001-39504 :param is_xbrl: Whether the filing is xbrl :param is_inline_xbrl: Whether the filing is inline_xbrl :return: The CompanyFiling instance with the filings that match the filters \"\"\"","title":"Filtering filings"},{"location":"using-the-company-api/#the-companyfilings-class","text":"The result of get_filings() is a CompanyFilings class. This class contains a pyarrow table with the filings and provides convenient functions for working with filings. You can access the underlying pyarrow Table using the .data property filings = company.get_filings() # Get the underlying Table data: pa.Table = filings.data","title":"The CompanyFilings class"},{"location":"using-the-company-api/#get-a-filing-by-index","text":"To access a filing in the CompanyFilings use the bracket [] notation e.g. filings[2] filings[2]","title":"Get a filing by index"},{"location":"using-the-company-api/#get-the-latest-filing","text":"The CompanyFilings class has a latest function that will return the latest Filing . So, to get the latest 10-Q filing, you do the following # Latest filing makes sense if you filter by form type e.g. 10-Q snow_10Qs = snow.get_filings(form='10-Q') latest_10Q = snow_10Qs.latest() # Or chain the function calls snow.get_filings(form='10-Q').latest()","title":"Get the latest filing"},{"location":"using-the-company-api/#get-company-facts","text":"Facts are an interesting and important dataset about a company accumlated from data the company provides to the SEC. Company facts are available for a company on the Company Facts f\"https://data.sec.gov/api/xbrl/companyfacts/CIK{cik:010}.json\" It is a JSON endpoint and edgartools parses the JSON into a structured dataset - a pyarrow.Table .","title":"Get company facts"},{"location":"using-the-company-api/#getting-facts-for-a-company","text":"To get company facts, first get the company, then call company.get_facts() company = Company(\"SNOW\") company_facts = company.get_facts_for_namespace() The result is a CompanyFacts object which wraps the underlying facts and provides convenient ways of working with the facts data. To get access to the underyling data use the facts property. You can get the facts as a pandas dataframe by calling to_pandas df = company_facts.to_pandas() Facts differ among companies. To see what facts are available you can use the facts_meta property.","title":"Getting facts for a company"},{"location":"using-the-filings-api/","text":"Filings To get started import from edgar and use the get_filings function. from edgar import * filings = get_filings() This gets the list of filings for the current year and quarter into a Filings object. If you need a different date range you can specify a year or years and a quarter or quarters. These are valid ways to specify the date range or filter by form or by filing date. >>> filings = get_filings(2021) # Get filings for 2021 >>> filings = get_filings(2021, 4) # Get filings for 2021 Q4 >>> filings = get_filings(2021, [3,4]) # Get filings for 2021 Q3 and Q4 >>> filings = get_filings([2020, 2021]) # Get filings for 2020 and 2021 >>> filings = get_filings([2020, 2021], 4) # Get filings for Q4 of 2020 and 2021 >>> filings = get_filings(range(2010, 2021)) # Get filings between 2010 and 2021 - does not include 2021 >>> filings = get_filings(2021, 4, form=\"D\") # Get filings for 2021 Q4 for form D >>> filings = get_filings(2021, 4, filing_date=\"2021-10-01\") # Get filings for 2021 Q4 on \"2021-10-01\" >>> filings = get_filings(2021, 4, filing_date=\"2021-10-01:2021-10-10\") # Get filings for 2021 Q4 between # \"2021-10-01\" and \"2021-10-10\" Convert the filings to a pandas dataframe The filings data is stored in the Filings class as a pyarrow.Table . You can get the data as a pandas dataframe using to_pandas df = filings.to_pandas() Navigating filings The Filings object allows you to navigate through filings using filings.next() and filings.prev() . This shows you pages of the data - the page size is about 50. # To see the next page of data filings.next() # To see the previous page filings.prev() # To see the current page filings.current() Getting the latest filings You can get the latest n filings by filing_date from a filings using filings.latest() . If you provide the parameter n it will return the latest n filings. filing = filings.latest(n=5) filing If you omit this parameter, or set n=1 it will return a single `Filings object. filing = filings.latest() filing Filtering filings You can filter the filings object using te filter() function. This allows you to filter by filing date, or by form. Filtering filings by date To filter by filing date specify the filing date in YYYY-MM-DD format e.g. 2022-01-24 (Note the parameters date and filing_date are equivalent aliases for each other) filings.filter(date=\"2021-01-24\") # or filings.filter(filing_date=\"2021-01-24\") You can specify a filing date range using the colon filings.filter(date=\"2021-01-12:2021-02-28\") To filter by dates before a specified date use `:YYYY-MM-DD' filings.filter(date=\":2021-02-28\") To filter by dates after a specified date use `YYYY-MM-DD:' filings.filter(date=\"2021-02-28:\") Filtering filings by form You can filter filings by form using the form parameter. filings.filter(form=\"10-K\") To filter by form e.g. 10-K and include form amendments use amendments = True . filings.filter(form=\"10-K\", amendments=True) Getting a single filing You can get a single filing from the filings using the bracket operator [] , specifying the index of the filing. The index is the value displayed in the leftmost position in the filings table. For example, to get the 10-Q for Costco in the table above use filings[3] filing = filings[3] View the filing homepage You can view the filing homepage in the terminal using filing.homepage This gives you access to the FilingHomepage class that you can use to list all the documents and datafiles on the filing. filing.homepage Open a filing You can open the filing in your browser using filing.open() . This will work on environments with access to the browser, will probably not work on a remote server. filing.open() Open the Filing Homepage You can open the filing homepage in the browser using filing.homepage.open() . filing.homepage.open() View the filing as Markdown You can view the filing's HTML content as markdown in the console using view() . It works for all filing types but can be a little slow for filings with large HTML files filing.view() Get the filing's html You can get the html content of the filing using .html() filing.html() Get the filing's html as Markdown You can get the html content as markdown using .markdown() filing.markdown() Working with XBRL filings Some filings are in XBRL (eXtensible Business Markup Language) format. These are mainly the newer filings, as the SEC has started requiring this for newer filings. If a filing is in XBRL format then it opens up a lot more ways to get structured data about that specific filing and also about the company referred to in that filing. The Filing class has an xbrl function that will download, parse and structure the filing's XBRL document if one exists. If it does not exist, then filing.xbrl() will return None . The function filing.xbrl() returns a FilingXbrl instance, which wraps the data, and provides convenient ways of working with the xbrl data. filing_xbrl = filing.xbrl()","title":"Filings"},{"location":"using-the-filings-api/#filings","text":"To get started import from edgar and use the get_filings function. from edgar import * filings = get_filings() This gets the list of filings for the current year and quarter into a Filings object. If you need a different date range you can specify a year or years and a quarter or quarters. These are valid ways to specify the date range or filter by form or by filing date. >>> filings = get_filings(2021) # Get filings for 2021 >>> filings = get_filings(2021, 4) # Get filings for 2021 Q4 >>> filings = get_filings(2021, [3,4]) # Get filings for 2021 Q3 and Q4 >>> filings = get_filings([2020, 2021]) # Get filings for 2020 and 2021 >>> filings = get_filings([2020, 2021], 4) # Get filings for Q4 of 2020 and 2021 >>> filings = get_filings(range(2010, 2021)) # Get filings between 2010 and 2021 - does not include 2021 >>> filings = get_filings(2021, 4, form=\"D\") # Get filings for 2021 Q4 for form D >>> filings = get_filings(2021, 4, filing_date=\"2021-10-01\") # Get filings for 2021 Q4 on \"2021-10-01\" >>> filings = get_filings(2021, 4, filing_date=\"2021-10-01:2021-10-10\") # Get filings for 2021 Q4 between # \"2021-10-01\" and \"2021-10-10\"","title":"Filings"},{"location":"using-the-filings-api/#convert-the-filings-to-a-pandas-dataframe","text":"The filings data is stored in the Filings class as a pyarrow.Table . You can get the data as a pandas dataframe using to_pandas df = filings.to_pandas()","title":"Convert the filings to a pandas dataframe"},{"location":"using-the-filings-api/#navigating-filings","text":"The Filings object allows you to navigate through filings using filings.next() and filings.prev() . This shows you pages of the data - the page size is about 50. # To see the next page of data filings.next() # To see the previous page filings.prev() # To see the current page filings.current()","title":"Navigating filings"},{"location":"using-the-filings-api/#getting-the-latest-filings","text":"You can get the latest n filings by filing_date from a filings using filings.latest() . If you provide the parameter n it will return the latest n filings. filing = filings.latest(n=5) filing If you omit this parameter, or set n=1 it will return a single `Filings object. filing = filings.latest() filing","title":"Getting the latest filings"},{"location":"using-the-filings-api/#filtering-filings","text":"You can filter the filings object using te filter() function. This allows you to filter by filing date, or by form.","title":"Filtering filings"},{"location":"using-the-filings-api/#filtering-filings-by-date","text":"To filter by filing date specify the filing date in YYYY-MM-DD format e.g. 2022-01-24 (Note the parameters date and filing_date are equivalent aliases for each other) filings.filter(date=\"2021-01-24\") # or filings.filter(filing_date=\"2021-01-24\") You can specify a filing date range using the colon filings.filter(date=\"2021-01-12:2021-02-28\") To filter by dates before a specified date use `:YYYY-MM-DD' filings.filter(date=\":2021-02-28\") To filter by dates after a specified date use `YYYY-MM-DD:' filings.filter(date=\"2021-02-28:\")","title":"Filtering filings by date"},{"location":"using-the-filings-api/#filtering-filings-by-form","text":"You can filter filings by form using the form parameter. filings.filter(form=\"10-K\") To filter by form e.g. 10-K and include form amendments use amendments = True . filings.filter(form=\"10-K\", amendments=True)","title":"Filtering filings by form"},{"location":"using-the-filings-api/#getting-a-single-filing","text":"You can get a single filing from the filings using the bracket operator [] , specifying the index of the filing. The index is the value displayed in the leftmost position in the filings table. For example, to get the 10-Q for Costco in the table above use filings[3] filing = filings[3]","title":"Getting a single filing"},{"location":"using-the-filings-api/#view-the-filing-homepage","text":"You can view the filing homepage in the terminal using filing.homepage This gives you access to the FilingHomepage class that you can use to list all the documents and datafiles on the filing. filing.homepage","title":"View the filing homepage"},{"location":"using-the-filings-api/#open-a-filing","text":"You can open the filing in your browser using filing.open() . This will work on environments with access to the browser, will probably not work on a remote server. filing.open()","title":"Open a filing"},{"location":"using-the-filings-api/#open-the-filing-homepage","text":"You can open the filing homepage in the browser using filing.homepage.open() . filing.homepage.open()","title":"Open the Filing Homepage"},{"location":"using-the-filings-api/#view-the-filing-as-markdown","text":"You can view the filing's HTML content as markdown in the console using view() . It works for all filing types but can be a little slow for filings with large HTML files filing.view()","title":"View the filing as Markdown"},{"location":"using-the-filings-api/#get-the-filings-html","text":"You can get the html content of the filing using .html() filing.html()","title":"Get the filing's html"},{"location":"using-the-filings-api/#get-the-filings-html-as-markdown","text":"You can get the html content as markdown using .markdown() filing.markdown()","title":"Get the filing's html as Markdown"},{"location":"using-the-filings-api/#working-with-xbrl-filings","text":"Some filings are in XBRL (eXtensible Business Markup Language) format. These are mainly the newer filings, as the SEC has started requiring this for newer filings. If a filing is in XBRL format then it opens up a lot more ways to get structured data about that specific filing and also about the company referred to in that filing. The Filing class has an xbrl function that will download, parse and structure the filing's XBRL document if one exists. If it does not exist, then filing.xbrl() will return None . The function filing.xbrl() returns a FilingXbrl instance, which wraps the data, and provides convenient ways of working with the xbrl data. filing_xbrl = filing.xbrl()","title":"Working with XBRL filings"},{"location":"working-with-filings/","text":"Working with a Filing A filing is a handle to a single SEC EDGAR filing. With it you can access all the documents and datafiles on the filing. Getting a Filing You can get a filing using the [] operator. For example: filings = get_filings() filing = filings[0] Open a Filing in your browser The open method opens the main document of a filing in your browser filing.open() Open the Filing homepage The filing homepage is the landing page for a filing. It links to all the documents and datafiles on the filing. filing.open_homepage() View the Filing This downloads the filing's HTML content, parses it and displays it as close to the original as is possible in the console or in a Jupyter notebook. This is a good way to preview a filing, but won't be perfect so if you need a perfect copy of the filing, you should use the open method to view it in the browser. filing.view() Get the HTML of a Filing This downloads the filing's HTML content and returns it as a string. html = filing.html() Getting the text of a Filing The text method returns the text of a filing text = filing.text() Working with Attachments The attachments attribute returns a list of the attachments on a filing attachments = filing.attachments Looping through Attachments You can loop through attachments using the for loop. for attachment in filings.attachments: print(attachment) Getting an Attachment The [] operator returns an attachment by index attachment = filing.attachments[0] Viewing an Attachment The view method displays the text of an attachment in the console. This works for text and html attachments attachment.view() Downloading Attachments The download method downloads all the attachments to a folder of your choice. ```python filing.attachments.download(path)","title":"Working with Filings"},{"location":"working-with-filings/#working-with-a-filing","text":"A filing is a handle to a single SEC EDGAR filing. With it you can access all the documents and datafiles on the filing.","title":"Working with a Filing"},{"location":"working-with-filings/#getting-a-filing","text":"You can get a filing using the [] operator. For example: filings = get_filings() filing = filings[0]","title":"Getting a Filing"},{"location":"working-with-filings/#open-a-filing-in-your-browser","text":"The open method opens the main document of a filing in your browser filing.open()","title":"Open a Filing in your browser"},{"location":"working-with-filings/#open-the-filing-homepage","text":"The filing homepage is the landing page for a filing. It links to all the documents and datafiles on the filing. filing.open_homepage()","title":"Open the Filing homepage"},{"location":"working-with-filings/#view-the-filing","text":"This downloads the filing's HTML content, parses it and displays it as close to the original as is possible in the console or in a Jupyter notebook. This is a good way to preview a filing, but won't be perfect so if you need a perfect copy of the filing, you should use the open method to view it in the browser. filing.view()","title":"View the Filing"},{"location":"working-with-filings/#get-the-html-of-a-filing","text":"This downloads the filing's HTML content and returns it as a string. html = filing.html()","title":"Get the HTML of a Filing"},{"location":"working-with-filings/#getting-the-text-of-a-filing","text":"The text method returns the text of a filing text = filing.text()","title":"Getting the text of a Filing"},{"location":"working-with-filings/#working-with-attachments","text":"The attachments attribute returns a list of the attachments on a filing attachments = filing.attachments","title":"Working with Attachments"},{"location":"working-with-filings/#looping-through-attachments","text":"You can loop through attachments using the for loop. for attachment in filings.attachments: print(attachment)","title":"Looping through Attachments"},{"location":"working-with-filings/#getting-an-attachment","text":"The [] operator returns an attachment by index attachment = filing.attachments[0]","title":"Getting an Attachment"},{"location":"working-with-filings/#viewing-an-attachment","text":"The view method displays the text of an attachment in the console. This works for text and html attachments attachment.view()","title":"Viewing an Attachment"},{"location":"working-with-filings/#downloading-attachments","text":"The download method downloads all the attachments to a folder of your choice. ```python filing.attachments.download(path)","title":"Downloading Attachments"},{"location":"working-with-xbrl/","text":"Working with XBRL in edgartools XBRL is an data format used by companies, mainly for financial reporting in their 10-Q and 10-K filings. EdgarTools can parse and extract data from XBRL files into dataframes as well as rich objects that allow you to manipulate and visualize the data inside. While the primary usage of XBRL is for reporting financial data, particularly for 10K and 10Q filings, it is also used to report for other non-financial filings such as 424B offerings. The EdgarTools data model is flexible enough to accommodate a wide variation of data across companies and filings when it comes to XBRL. The Data Model Looking at the data model, it is worth starting at the top. When searching for filings, you can limit the results to xbrl filings by using index=\"xbrl\" . filings = get_filings(index=\"xbrl\") Each Filing has xbrl() function that will download and parse the XBRL attached to the filing or None if it does not. filing = filings[0] filing.xbrl() The xbrl() function will return an XBRLInstance object in simple cases, or an XbrlData object in more complicated cases. Here you can see the XbrlData object for Apple Inc. 10-K filing. It contains the XBRLInstance object, which holds the primary facts reported in the filings, as well as a list of statement. Each statement is a container for a group of facts, such as a balance sheet or income statement. For simpler filings there might only be an XBRLInstance document attached to the filing in which cases .xbrl() will return an XbrlInstance object, and there will be no statements. XbrlInstance The main XBRL container for data is called XBRL instance. It contains the primary data reported for that filing. The data is in a very well-structured XML format, but the EdgarTools XBRL parser unrolls that into a data frame. For simple XBRL, the data inside an XBRL instance is self-contained, so it is straightforward to parse into data structures like data frames. XbrlData For more complicated XBRL, some aspects of the data will have to be resolved against the other XBRL files for that filing, such as the presentation and calculation files. In this case, the parser will return an XBRLData container containing the XBRLInstance and the other XBRL files. These files can include presentation: This file describes how the XBRL data is presented in the filing. It is used to resolve the hierarchy of the data. calculation: This file describes how the XBRL data is calculated. It is used to resolve the calculations of the data. definition: This file describes the definitions of the XBRL data. It is used to resolve the meaning of the data. label: This file describes the labels of the XBRL data. It is used to resolve the labels of the data. Statements But those are the data that go into the XbrlData data object - the output is more interesting. Within the data are usually financial statements like the balance sheet and income statement, or other non-financial statements such as auditor information or firm disclosures. These can be accessed using the XbrlData get_statement() function. To see the statements that are included in the XBRL data, use XbrlData.statements . This is useful and often necessary since firms will use their own specific names for statements. statements = xbrl_data.statements You can access a specific statement using the bracket notation or loop over all the statements statements['CONSOLIDATEDBALANCESHEETS'] This is equivalent to xbrl_data.get_statement('CONSOLIDATEDBALANCESHEETS') Statement Inside each statement is a data frame which you can access using statement.data . statement.data This will also contain metadata columns that you may or may not need to see it's preferable to use statement.get_dataframe() Financials Experts' data can contain both financial and non-financial statements. Mostly you will be interested in financial statements, so the Financials class Is a convenient wrapper over the most common financial statements. financials = Financials(xbrl_data) Summary Hopefully this gives you a good overview of working with XBRL data using edgartools . It's very complicated and a lot of work has gone into XBRL parsing in Edgar tools, and there may still be enhancements to be made. If you have any questions or suggestions, please feel free to reach out to us on the Edgartools GitHub repository","title":"Working with XBRL in edgartools"},{"location":"working-with-xbrl/#working-with-xbrl-in-edgartools","text":"XBRL is an data format used by companies, mainly for financial reporting in their 10-Q and 10-K filings. EdgarTools can parse and extract data from XBRL files into dataframes as well as rich objects that allow you to manipulate and visualize the data inside. While the primary usage of XBRL is for reporting financial data, particularly for 10K and 10Q filings, it is also used to report for other non-financial filings such as 424B offerings. The EdgarTools data model is flexible enough to accommodate a wide variation of data across companies and filings when it comes to XBRL.","title":"Working with XBRL in edgartools"},{"location":"working-with-xbrl/#the-data-model","text":"Looking at the data model, it is worth starting at the top. When searching for filings, you can limit the results to xbrl filings by using index=\"xbrl\" . filings = get_filings(index=\"xbrl\") Each Filing has xbrl() function that will download and parse the XBRL attached to the filing or None if it does not. filing = filings[0] filing.xbrl() The xbrl() function will return an XBRLInstance object in simple cases, or an XbrlData object in more complicated cases. Here you can see the XbrlData object for Apple Inc. 10-K filing. It contains the XBRLInstance object, which holds the primary facts reported in the filings, as well as a list of statement. Each statement is a container for a group of facts, such as a balance sheet or income statement. For simpler filings there might only be an XBRLInstance document attached to the filing in which cases .xbrl() will return an XbrlInstance object, and there will be no statements.","title":"The Data Model"},{"location":"working-with-xbrl/#xbrlinstance","text":"The main XBRL container for data is called XBRL instance. It contains the primary data reported for that filing. The data is in a very well-structured XML format, but the EdgarTools XBRL parser unrolls that into a data frame. For simple XBRL, the data inside an XBRL instance is self-contained, so it is straightforward to parse into data structures like data frames.","title":"XbrlInstance"},{"location":"working-with-xbrl/#xbrldata","text":"For more complicated XBRL, some aspects of the data will have to be resolved against the other XBRL files for that filing, such as the presentation and calculation files. In this case, the parser will return an XBRLData container containing the XBRLInstance and the other XBRL files. These files can include presentation: This file describes how the XBRL data is presented in the filing. It is used to resolve the hierarchy of the data. calculation: This file describes how the XBRL data is calculated. It is used to resolve the calculations of the data. definition: This file describes the definitions of the XBRL data. It is used to resolve the meaning of the data. label: This file describes the labels of the XBRL data. It is used to resolve the labels of the data.","title":"XbrlData"},{"location":"working-with-xbrl/#statements","text":"But those are the data that go into the XbrlData data object - the output is more interesting. Within the data are usually financial statements like the balance sheet and income statement, or other non-financial statements such as auditor information or firm disclosures. These can be accessed using the XbrlData get_statement() function. To see the statements that are included in the XBRL data, use XbrlData.statements . This is useful and often necessary since firms will use their own specific names for statements. statements = xbrl_data.statements You can access a specific statement using the bracket notation or loop over all the statements statements['CONSOLIDATEDBALANCESHEETS'] This is equivalent to xbrl_data.get_statement('CONSOLIDATEDBALANCESHEETS')","title":"Statements"},{"location":"working-with-xbrl/#statement","text":"Inside each statement is a data frame which you can access using statement.data . statement.data This will also contain metadata columns that you may or may not need to see it's preferable to use statement.get_dataframe()","title":"Statement"},{"location":"working-with-xbrl/#financials","text":"Experts' data can contain both financial and non-financial statements. Mostly you will be interested in financial statements, so the Financials class Is a convenient wrapper over the most common financial statements. financials = Financials(xbrl_data)","title":"Financials"},{"location":"working-with-xbrl/#summary","text":"Hopefully this gives you a good overview of working with XBRL data using edgartools . It's very complicated and a lot of work has gone into XBRL parsing in Edgar tools, and there may still be enhancements to be made. If you have any questions or suggestions, please feel free to reach out to us on the Edgartools GitHub repository","title":"Summary"}]}